(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["tauri"] = factory();
	else
		root["tauri"] = factory();
})(global, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../tauri/Cargo.toml":
/*!******************************!*\
  !*** ../../tauri/Cargo.toml ***!
  \******************************/
/***/ ((module) => {

module.exports    = {
	"package": {
		"name": "tauri",
		"version": "0.11.1",
		"authors": [
			"Lucas Fernandes Gon√ßalves Nogueira <lucas@tauri.studio>",
			"Daniel Thompson-Yvetot <denjell@sfosc.org>",
			"Tensor Programming <tensordeveloper@gmail.com>"
		],
		"categories": [
			"gui",
			"web-programming"
		],
		"license": "MIT",
		"homepage": "https://tauri.studio",
		"repository": "https://github.com/tauri-apps/tauri",
		"description": "Make tiny, secure apps for all desktop platforms with Tauri",
		"edition": "2018",
		"exclude": [
			"test/fixture/**"
		],
		"metadata": {
			"docs": {
				"rs": {
					"features": [
						"all-api"
					]
				}
			}
		}
	},
	"dependencies": {
		"serde_json": "1.0",
		"serde": {
			"version": "1.0",
			"features": [
				"derive"
			]
		},
		"webview_official": "0.0.4",
		"tauri_includedir": "0.6.0",
		"phf": "0.8.0",
		"base64": "0.13.0",
		"webbrowser": "0.5.5",
		"lazy_static": "1.4.0",
		"tiny_http": {
			"version": "0.7",
			"optional": true
		},
		"threadpool": "1.8",
		"uuid": {
			"version": "0.8.1",
			"features": [
				"v4"
			]
		},
		"anyhow": "1.0.37",
		"thiserror": "1.0.23",
		"envmnt": "0.8.4",
		"once_cell": "1.5.2",
		"tauri-api": {
			"version": "0.7.5",
			"path": "../tauri-api"
		},
		"urlencoding": "1.1.1"
	},
	"target": {
		"cfg(target_os = \"windows\")": {
			"dependencies": {
				"runas": "0.2"
			}
		}
	},
	"build-dependencies": {
		"tauri_includedir_codegen": "0.6.2",
		"cfg_aliases": "0.1.1"
	},
	"dev-dependencies": {
		"proptest": "0.10.1",
		"serde_json": "1.0",
		"tauri": {
			"path": ".",
			"features": [
				"all-api"
			]
		},
		"serde": {
			"version": "1.0",
			"features": [
				"derive"
			]
		}
	},
	"features": {
		"cli": [
			"tauri-api/cli"
		],
		"embedded-server": [
			"tiny_http"
		],
		"no-server": [],
		"all-api": [
			"tauri-api/notification"
		],
		"read-text-file": [],
		"read-binary-file": [],
		"write-file": [],
		"write-binary-file": [],
		"read-dir": [],
		"copy-file": [],
		"create-dir": [],
		"remove-dir": [],
		"remove-file": [],
		"rename-file": [],
		"path-api": [],
		"set-title": [],
		"execute": [],
		"open": [],
		"event": [],
		"updater": [],
		"open-dialog": [],
		"save-dialog": [],
		"http-request": [],
		"notification": [
			"tauri-api/notification"
		]
	},
	"example": [
		{
			"name": "communication",
			"path": "examples/communication/src-tauri/src/main.rs"
		}
	]
}

/***/ }),

/***/ "./src/api/init.ts":
/*!*************************!*\
  !*** ./src/api/init.ts ***!
  \*************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var template_1 = __webpack_require__(/*! ../template */ "./src/template/index.ts");
var path_1 = __webpack_require__(/*! path */ "path");
var toml_1 = __importDefault(__webpack_require__(/*! @tauri-apps/toml */ "@tauri-apps/toml"));
var fs_1 = __webpack_require__(/*! fs */ "fs");
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
module.exports = function (args) {
    var _a;
    var injectResult = template_1.inject(args.directory, 'all', {
        force: args.force,
        logging: args.logging,
        tauriPath: args.tauriPath
    }, args.customConfig);
    if (args.appName) {
        var manifestPath = path_1.resolve(args.directory, 'src-tauri/Cargo.toml');
        var cargoManifest = toml_1.default.parse(fs_1.readFileSync(manifestPath).toString());
        var binName = lodash_1.kebabCase(args.appName);
        cargoManifest.package.name = binName;
        cargoManifest.package['default-run'] = binName;
        if ((_a = cargoManifest.bin) === null || _a === void 0 ? void 0 : _a.length) {
            cargoManifest.bin[0].name = binName;
        }
        fs_1.writeFileSync(manifestPath, toml_1.default.stringify(cargoManifest));
    }
    return injectResult;
};


/***/ }),

/***/ "./src/helpers/copy-templates.ts":
/*!***************************************!*\
  !*** ./src/helpers/copy-templates.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// forked from https://github.com/quasarframework/quasar/blob/master/app/lib/app-extension/Extension.js
var fast_glob_1 = __importDefault(__webpack_require__(/*! fast-glob */ "fast-glob"));
var fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ "fs-extra"));
var isbinaryfile_1 = __webpack_require__(/*! isbinaryfile */ "isbinaryfile");
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var path_1 = __webpack_require__(/*! path */ "path");
var copyTemplates = function (_a) {
    var source = _a.source, target = _a.target, scope = _a.scope;
    var files = fast_glob_1.default.sync(['**/*'], {
        cwd: source
    });
    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
        var rawPath = files_1[_i];
        var targetRelativePath = rawPath
            .split('/')
            .map(function (name) {
            // dotfiles are ignored when published to npm, therefore in templates
            // we need to use underscore instead (e.g. "_gitignore")
            if (name.startsWith('_') && name.charAt(1) !== '_') {
                return "." + name.slice(1);
            }
            if (name.startsWith('_') && name.charAt(1) === '_') {
                return "" + name.slice(1);
            }
            return name;
        })
            .join('/');
        var targetPath = path_1.join(target, targetRelativePath);
        var sourcePath = path_1.resolve(source, rawPath);
        fs_extra_1.default.ensureFileSync(targetPath);
        if (isbinaryfile_1.isBinaryFileSync(sourcePath)) {
            fs_extra_1.default.copyFileSync(sourcePath, targetPath);
        }
        else {
            // eslint-disable-next-line security/detect-non-literal-fs-filename
            var rawContent = fs_extra_1.default.readFileSync(sourcePath, 'utf-8');
            var compiled = lodash_1.template(rawContent, {
                interpolate: /<%=([\s\S]+?)%>/g
            });
            // eslint-disable-next-line security/detect-non-literal-fs-filename
            fs_extra_1.default.writeFileSync(targetPath, compiled(scope), 'utf-8');
        }
    }
};
exports.default = copyTemplates;


/***/ }),

/***/ "./src/helpers/logger.ts":
/*!*******************************!*\
  !*** ./src/helpers/logger.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var chalk_1 = __importDefault(__webpack_require__(/*! chalk */ "chalk"));
var ms_1 = __importDefault(__webpack_require__(/*! ms */ "ms"));
var prevTime;
exports.default = (function (banner, color) {
    if (color === void 0) { color = chalk_1.default.green; }
    return function (msg) {
        var curr = +new Date();
        var diff = curr - (prevTime || curr);
        prevTime = curr;
        if (msg) {
            console.log(
            // TODO: proper typings for color and banner
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-unsafe-call
            " " + color(String(banner)) + " " + msg + " " + chalk_1.default.green("+" + ms_1.default(diff)));
        }
        else {
            console.log();
        }
    };
});


/***/ }),

/***/ "./src/template/defaultConfig.ts":
/*!***************************************!*\
  !*** ./src/template/defaultConfig.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.default = {
    build: {
        distDir: '../dist',
        devPath: 'http://localhost:4000',
        beforeDevCommand: '',
        beforeBuildCommand: ''
    },
    ctx: {},
    tauri: {
        embeddedServer: {
            active: true
        },
        bundle: {
            active: true,
            targets: 'all',
            identifier: 'com.tauri.dev',
            icon: [
                'icons/32x32.png',
                'icons/128x128.png',
                'icons/128x128@2x.png',
                'icons/icon.icns',
                'icons/icon.ico'
            ],
            resources: [],
            externalBin: [],
            copyright: '',
            category: 'DeveloperTool',
            shortDescription: '',
            longDescription: '',
            deb: {
                depends: [],
                useBootstrapper: false
            },
            osx: {
                frameworks: [],
                minimumSystemVersion: '',
                useBootstrapper: false
            },
            exceptionDomain: ''
        },
        allowlist: {
            all: true
        },
        window: {
            title: 'Tauri App',
            width: 800,
            height: 600,
            resizable: true,
            fullscreen: false
        },
        security: {
            csp: "default-src blob: data: filesystem: ws: http: https: 'unsafe-eval' 'unsafe-inline'"
        },
        inliner: {
            active: true
        }
    }
};


/***/ }),

/***/ "./src/template/index.ts":
/*!*******************************!*\
  !*** ./src/template/index.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.inject = void 0;
var fs_extra_1 = __webpack_require__(/*! fs-extra */ "fs-extra");
var path_1 = __webpack_require__(/*! path */ "path");
var webpack_merge_1 = __webpack_require__(/*! webpack-merge */ "webpack-merge");
var copy_templates_1 = __importDefault(__webpack_require__(/*! ../helpers/copy-templates */ "./src/helpers/copy-templates.ts"));
var logger_1 = __importDefault(__webpack_require__(/*! ../helpers/logger */ "./src/helpers/logger.ts"));
var defaultConfig_1 = __importDefault(__webpack_require__(/*! ./defaultConfig */ "./src/template/defaultConfig.ts"));
var chalk_1 = __importDefault(__webpack_require__(/*! chalk */ "chalk"));
var log = logger_1.default('app:tauri');
var warn = logger_1.default('app:tauri (template)', chalk_1.default.red);
var injectConfFile = function (injectPath, _a, customConfig) {
    var force = _a.force, logging = _a.logging;
    if (customConfig === void 0) { customConfig = {}; }
    var path = path_1.join(injectPath, 'tauri.conf.json');
    if (fs_extra_1.existsSync(path) && force !== 'conf' && force !== 'all') {
        warn("tauri.conf.json found in " + path + "\n  Run `tauri init --force conf` to overwrite.");
        if (!force)
            return false;
    }
    else {
        fs_extra_1.removeSync(path);
        Object.keys(defaultConfig_1.default).forEach(function (key) {
            // Options marked `null` should be removed
            /* eslint-disable security/detect-object-injection */
            if (customConfig[key] === null) {
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete defaultConfig_1.default[key];
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete customConfig[key];
            }
            /* eslint-enable security/detect-object-injection */
        });
        var finalConf = webpack_merge_1.merge(defaultConfig_1.default, customConfig);
        fs_extra_1.writeFileSync(path, JSON.stringify(finalConf, undefined, 2));
        if (logging)
            log('Successfully wrote tauri.conf.json');
    }
};
var injectTemplate = function (injectPath, _a) {
    var force = _a.force, logging = _a.logging, tauriPath = _a.tauriPath;
    var dir = path_1.normalize(path_1.join(injectPath, 'src-tauri'));
    if (fs_extra_1.existsSync(dir) && force !== 'template' && force !== 'all') {
        warn("Tauri dir (" + dir + ") not empty.\nRun `tauri init --force template` to overwrite.");
        if (!force)
            return false;
    }
    var resolveTauriPath = function (tauriPath) {
        var resolvedPath = tauriPath.startsWith('/') || /^\S:/g.test(tauriPath)
            ? path_1.join(tauriPath, 'tauri') // we received a full path as argument
            : path_1.join('..', tauriPath, 'tauri'); // we received a relative path
        return resolvedPath.replace(/\\/g, '/');
    };
    var resolveCurrentTauriVersion = function () {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access
        var tauriManifest = __webpack_require__(/*! ../../../../tauri/Cargo.toml */ "../../tauri/Cargo.toml");
        var version = tauriManifest.package.version;
        return version.substring(0, version.lastIndexOf('.'));
    };
    var tauriDep = tauriPath
        ? "{ path = \"" + resolveTauriPath(tauriPath) + "\" }"
        : "{ version = \"" + resolveCurrentTauriVersion() + "\" }";
    fs_extra_1.removeSync(dir);
    copy_templates_1.default({
        source: path_1.resolve(__dirname, '../../templates/src-tauri'),
        scope: {
            tauriDep: tauriDep
        },
        target: dir
    });
    if (logging)
        log('Successfully wrote src-tauri');
};
var inject = function (injectPath, type, _a, customConfig) {
    var _b = _a.force, force = _b === void 0 ? false : _b, _c = _a.logging, logging = _c === void 0 ? false : _c, tauriPath = _a.tauriPath;
    if (typeof type !== 'string' || typeof injectPath !== 'string') {
        warn('- internal error. Required params missing.');
        return false;
    }
    if (type === 'template' || type === 'all') {
        injectTemplate(injectPath, { force: force, logging: logging, tauriPath: tauriPath });
    }
    if (type === 'conf' || type === 'all') {
        injectConfFile(path_1.join(injectPath, 'src-tauri'), { force: force, logging: logging }, customConfig);
    }
    return true;
};
exports.inject = inject;


/***/ }),

/***/ "@tauri-apps/toml":
/*!***********************************!*\
  !*** external "@tauri-apps/toml" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@tauri-apps/toml");;

/***/ }),

/***/ "chalk":
/*!************************!*\
  !*** external "chalk" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("chalk");;

/***/ }),

/***/ "fast-glob":
/*!****************************!*\
  !*** external "fast-glob" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("fast-glob");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");;

/***/ }),

/***/ "fs-extra":
/*!***************************!*\
  !*** external "fs-extra" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs-extra");;

/***/ }),

/***/ "isbinaryfile":
/*!*******************************!*\
  !*** external "isbinaryfile" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("isbinaryfile");;

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("lodash");;

/***/ }),

/***/ "ms":
/*!*********************!*\
  !*** external "ms" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("ms");;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");;

/***/ }),

/***/ "webpack-merge":
/*!********************************!*\
  !*** external "webpack-merge" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("webpack-merge");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/api/init.ts");
/******/ })()
;
});
//# sourceMappingURL=init.js.map