(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["tauri"] = factory();
	else
		root["tauri"] = factory();
})(global, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/api/recipes/index.ts":
/*!**********************************!*\
  !*** ./src/api/recipes/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.recipeDescriptiveNames = exports.recipeShortNames = exports.recipeByDescriptiveName = exports.recipeByShortName = exports.recipeNames = exports.allRecipes = void 0;
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var react_1 = __webpack_require__(/*! ./react */ "./src/api/recipes/react.ts");
var none = {
    descriptiveName: 'No recipe',
    shortName: 'none',
    configUpdate: lodash_1.identity,
    extraNpmDependencies: [],
    extraNpmDevDependencies: [],
    postConfiguration: function (cwd) { }
};
exports.allRecipes = [none, react_1.reactjs, react_1.reactts];
exports.recipeNames = lodash_1.map(exports.allRecipes, function (r) { return [r.shortName, r.descriptiveName]; });
var recipeByShortName = function (name) {
    return lodash_1.find(exports.allRecipes, function (r) { return r.shortName === name; });
};
exports.recipeByShortName = recipeByShortName;
var recipeByDescriptiveName = function (name) {
    return lodash_1.find(exports.allRecipes, function (r) { return r.descriptiveName === name; });
};
exports.recipeByDescriptiveName = recipeByDescriptiveName;
exports.recipeShortNames = lodash_1.map(exports.allRecipes, function (r) { return r.shortName; });
exports.recipeDescriptiveNames = lodash_1.map(exports.allRecipes, function (r) { return r.descriptiveName; });


/***/ }),

/***/ "./src/api/recipes/react.ts":
/*!**********************************!*\
  !*** ./src/api/recipes/react.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reactts = exports.reactjs = void 0;
var spawn_1 = __webpack_require__(/*! ../../helpers/spawn */ "./src/helpers/spawn.ts");
var logger_1 = __importDefault(__webpack_require__(/*! ../../helpers/logger */ "./src/helpers/logger.ts"));
var copy_templates_1 = __importDefault(__webpack_require__(/*! ../../helpers/copy-templates */ "./src/helpers/copy-templates.ts"));
var path_1 = __webpack_require__(/*! path */ "path");
var uiAppDir = 'app-ui';
var log = logger_1.default('react-recipe');
var completeLogMsg = "\n  Your installation completed.\n  To start, run yarn tauri dev\n";
var afterCra = function () {
    copy_templates_1.default({
        source: path_1.resolve(__dirname, '../../templates/recipes/react/'),
        scope: {},
        target: path_1.join(uiAppDir, './src/')
    });
    log(completeLogMsg);
};
var reactjs = {
    descriptiveName: 'React.js',
    shortName: 'reactjs',
    configUpdate: function (cfg) { return (__assign(__assign({}, cfg), { distDir: "../" + uiAppDir + "/build", devPath: 'http://localhost:3000', beforeDevCommand: "yarn --cwd " + uiAppDir + " start", beforeBuildCommand: "yarn --cwd " + uiAppDir + " build" })); },
    extraNpmDevDependencies: ['create-react-app'],
    extraNpmDependencies: ['react'],
    postConfiguration: function (cwd) {
        spawn_1.spawnSync('yarn', ['create-react-app', uiAppDir], cwd);
        afterCra();
    }
};
exports.reactjs = reactjs;
var reactts = __assign(__assign({}, reactjs), { descriptiveName: 'React with Typescript', shortName: 'reactts', extraNpmDependencies: [
        'typescript',
        '@types/node',
        '@types/react',
        '@types/react-dom',
        '@types/jest'
    ], postConfiguration: function (cwd) {
        spawn_1.spawnSync('yarn', ['create-react-app', '--template', 'typescript', uiAppDir], cwd);
        afterCra();
    } });
exports.reactts = reactts;


/***/ }),

/***/ "./src/helpers/copy-templates.ts":
/*!***************************************!*\
  !*** ./src/helpers/copy-templates.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// forked from https://github.com/quasarframework/quasar/blob/master/app/lib/app-extension/Extension.js
var fast_glob_1 = __importDefault(__webpack_require__(/*! fast-glob */ "fast-glob"));
var fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ "fs-extra"));
var isbinaryfile_1 = __webpack_require__(/*! isbinaryfile */ "isbinaryfile");
var lodash_1 = __webpack_require__(/*! lodash */ "lodash");
var path_1 = __webpack_require__(/*! path */ "path");
var copyTemplates = function (_a) {
    var source = _a.source, target = _a.target, scope = _a.scope;
    var files = fast_glob_1.default.sync(['**/*'], {
        cwd: source
    });
    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
        var rawPath = files_1[_i];
        var targetRelativePath = rawPath
            .split('/')
            .map(function (name) {
            // dotfiles are ignored when published to npm, therefore in templates
            // we need to use underscore instead (e.g. "_gitignore")
            if (name.startsWith('_') && name.charAt(1) !== '_') {
                return "." + name.slice(1);
            }
            if (name.startsWith('_') && name.charAt(1) === '_') {
                return "" + name.slice(1);
            }
            return name;
        })
            .join('/');
        var targetPath = path_1.join(target, targetRelativePath);
        var sourcePath = path_1.resolve(source, rawPath);
        fs_extra_1.default.ensureFileSync(targetPath);
        if (isbinaryfile_1.isBinaryFileSync(sourcePath)) {
            fs_extra_1.default.copyFileSync(sourcePath, targetPath);
        }
        else {
            // eslint-disable-next-line security/detect-non-literal-fs-filename
            var rawContent = fs_extra_1.default.readFileSync(sourcePath, 'utf-8');
            var compiled = lodash_1.template(rawContent, {
                interpolate: /<%=([\s\S]+?)%>/g
            });
            // eslint-disable-next-line security/detect-non-literal-fs-filename
            fs_extra_1.default.writeFileSync(targetPath, compiled(scope), 'utf-8');
        }
    }
};
exports.default = copyTemplates;


/***/ }),

/***/ "./src/helpers/logger.ts":
/*!*******************************!*\
  !*** ./src/helpers/logger.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var chalk_1 = __importDefault(__webpack_require__(/*! chalk */ "chalk"));
var ms_1 = __importDefault(__webpack_require__(/*! ms */ "ms"));
var prevTime;
exports.default = (function (banner, color) {
    if (color === void 0) { color = chalk_1.default.green; }
    return function (msg) {
        var curr = +new Date();
        var diff = curr - (prevTime || curr);
        prevTime = curr;
        if (msg) {
            console.log(
            // TODO: proper typings for color and banner
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-unsafe-call
            " " + color(String(banner)) + " " + msg + " " + chalk_1.default.green("+" + ms_1.default(diff)));
        }
        else {
            console.log();
        }
    };
});


/***/ }),

/***/ "./src/helpers/spawn.ts":
/*!******************************!*\
  !*** ./src/helpers/spawn.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.spawnSync = exports.spawn = void 0;
var cross_spawn_1 = __importDefault(__webpack_require__(/*! cross-spawn */ "cross-spawn"));
var logger_1 = __importDefault(__webpack_require__(/*! ./logger */ "./src/helpers/logger.ts"));
var chalk_1 = __importDefault(__webpack_require__(/*! chalk */ "chalk"));
var log = logger_1.default('app:spawn');
var warn = logger_1.default('app:spawn', chalk_1.default.red);
/*
  Returns pid, takes onClose
 */
var spawn = function (cmd, params, cwd, onClose) {
    log("Running \"" + cmd + " " + params.join(' ') + "\"");
    log();
    // TODO: move to execa?
    var runner = cross_spawn_1.default(cmd, params, {
        stdio: 'inherit',
        cwd: cwd,
        env: process.env
    });
    runner.on('close', function (code) {
        log();
        if (code) {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            log("Command \"" + cmd + "\" failed with exit code: " + code);
        }
        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
        onClose && onClose(code, runner.pid);
    });
    return runner.pid;
};
exports.spawn = spawn;
/*
  Returns nothing, takes onFail
 */
var spawnSync = function (cmd, params, cwd, onFail) {
    log("[sync] Running \"" + cmd + " " + params.join(' ') + "\"");
    log();
    var runner = cross_spawn_1.default.sync(cmd, params, {
        stdio: 'inherit',
        cwd: cwd
    });
    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
    if (runner.status || runner.error) {
        warn();
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        warn("\u26A0\uFE0F  Command \"" + cmd + "\" failed with exit code: " + runner.status);
        if (runner.status === null) {
            warn("\u26A0\uFE0F  Please globally install \"" + cmd + "\"");
        }
        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
        onFail && onFail();
        process.exit(1);
    }
};
exports.spawnSync = spawnSync;


/***/ }),

/***/ "chalk":
/*!************************!*\
  !*** external "chalk" ***!
  \************************/
/***/ ((module) => {

module.exports = require("chalk");;

/***/ }),

/***/ "cross-spawn":
/*!******************************!*\
  !*** external "cross-spawn" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("cross-spawn");;

/***/ }),

/***/ "fast-glob":
/*!****************************!*\
  !*** external "fast-glob" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("fast-glob");;

/***/ }),

/***/ "fs-extra":
/*!***************************!*\
  !*** external "fs-extra" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("fs-extra");;

/***/ }),

/***/ "isbinaryfile":
/*!*******************************!*\
  !*** external "isbinaryfile" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("isbinaryfile");;

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("lodash");;

/***/ }),

/***/ "ms":
/*!*********************!*\
  !*** external "ms" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("ms");;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/api/recipes/index.ts");
/******/ })()
;
});
//# sourceMappingURL=recipes.js.map