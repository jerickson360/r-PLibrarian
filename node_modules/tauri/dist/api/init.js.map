{"version":3,"sources":["webpack://tauri/webpack/universalModuleDefinition","webpack://tauri/./node_modules/toml-loader/tauri/Cargo.toml","webpack://tauri/./src/api/init.ts","webpack://tauri/./src/helpers/copy-templates.ts","webpack://tauri/./src/helpers/logger.ts","webpack://tauri/./src/template/defaultConfig.ts","webpack://tauri/./src/template/index.ts","webpack://tauri/external \"@tauri-apps/toml\"","webpack://tauri/external \"chalk\"","webpack://tauri/external \"fast-glob\"","webpack://tauri/external \"fs\"","webpack://tauri/external \"fs-extra\"","webpack://tauri/external \"isbinaryfile\"","webpack://tauri/external \"lodash\"","webpack://tauri/external \"ms\"","webpack://tauri/external \"path\"","webpack://tauri/external \"webpack-merge\"","webpack://tauri/webpack/bootstrap","webpack://tauri/webpack/startup"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;ACrIa;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D,iBAAiB,mBAAO,CAAC,4CAAa;AACtC,aAAa,mBAAO,CAAC,kBAAM;AAC3B,6BAA6B,mBAAO,CAAC,0CAAkB;AACvD,WAAW,mBAAO,CAAC,cAAI;AACvB,eAAe,mBAAO,CAAC,sBAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7Ba;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D;AACA,kCAAkC,mBAAO,CAAC,4BAAW;AACrD,iCAAiC,mBAAO,CAAC,0BAAU;AACnD,qBAAqB,mBAAO,CAAC,kCAAc;AAC3C,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,aAAa,mBAAO,CAAC,kBAAM;AAC3B;AACA;AACA;AACA;AACA,KAAK;AACL,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;ACjDF;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D,8BAA8B,mBAAO,CAAC,oBAAO;AAC7C,2BAA2B,mBAAO,CAAC,cAAI;AACvC;AACA,eAAe;AACf,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACxBY;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3Da;AACb;AACA,4CAA4C;AAC5C;AACA,8CAA6C,CAAC,cAAc,EAAC;AAC7D,cAAc;AACd,iBAAiB,mBAAO,CAAC,0BAAU;AACnC,aAAa,mBAAO,CAAC,kBAAM;AAC3B,sBAAsB,mBAAO,CAAC,oCAAe;AAC7C,uCAAuC,mBAAO,CAAC,kEAA2B;AAC1E,+BAA+B,mBAAO,CAAC,kDAAmB;AAC1D,sCAAsC,mBAAO,CAAC,wDAAiB;AAC/D,8BAA8B,mBAAO,CAAC,oBAAO;AAC7C;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,4BAA4B,mBAAO,CAAC,4DAA8B;AAClE;AACA;AACA;AACA;AACA,YAAY,iDAAiD;AAC7D,YAAY,qDAAqD;AACjE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uDAAuD;AAC3F;AACA;AACA,8DAA8D,iCAAiC;AAC/F;AACA;AACA;AACA,cAAc;;;;;;;;;;;;AC3Fd,8C;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,gC;;;;;;;;;;;ACAA,sC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,gC;;;;;;;;;;;ACAA,kC;;;;;;;;;;;ACAA,2C;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"api/init.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tauri\"] = factory();\n\telse\n\t\troot[\"tauri\"] = factory();\n})(global, function() {\nreturn ","module.exports    = {\n\t\"package\": {\n\t\t\"name\": \"tauri\",\n\t\t\"version\": \"0.11.1\",\n\t\t\"authors\": [\n\t\t\t\"Lucas Fernandes Gon√ßalves Nogueira <lucas@tauri.studio>\",\n\t\t\t\"Daniel Thompson-Yvetot <denjell@sfosc.org>\",\n\t\t\t\"Tensor Programming <tensordeveloper@gmail.com>\"\n\t\t],\n\t\t\"categories\": [\n\t\t\t\"gui\",\n\t\t\t\"web-programming\"\n\t\t],\n\t\t\"license\": \"MIT\",\n\t\t\"homepage\": \"https://tauri.studio\",\n\t\t\"repository\": \"https://github.com/tauri-apps/tauri\",\n\t\t\"description\": \"Make tiny, secure apps for all desktop platforms with Tauri\",\n\t\t\"edition\": \"2018\",\n\t\t\"exclude\": [\n\t\t\t\"test/fixture/**\"\n\t\t],\n\t\t\"metadata\": {\n\t\t\t\"docs\": {\n\t\t\t\t\"rs\": {\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t\"all-api\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"dependencies\": {\n\t\t\"serde_json\": \"1.0\",\n\t\t\"serde\": {\n\t\t\t\"version\": \"1.0\",\n\t\t\t\"features\": [\n\t\t\t\t\"derive\"\n\t\t\t]\n\t\t},\n\t\t\"webview_official\": \"0.0.4\",\n\t\t\"tauri_includedir\": \"0.6.0\",\n\t\t\"phf\": \"0.8.0\",\n\t\t\"base64\": \"0.13.0\",\n\t\t\"webbrowser\": \"0.5.5\",\n\t\t\"lazy_static\": \"1.4.0\",\n\t\t\"tiny_http\": {\n\t\t\t\"version\": \"0.7\",\n\t\t\t\"optional\": true\n\t\t},\n\t\t\"threadpool\": \"1.8\",\n\t\t\"uuid\": {\n\t\t\t\"version\": \"0.8.1\",\n\t\t\t\"features\": [\n\t\t\t\t\"v4\"\n\t\t\t]\n\t\t},\n\t\t\"anyhow\": \"1.0.37\",\n\t\t\"thiserror\": \"1.0.23\",\n\t\t\"envmnt\": \"0.8.4\",\n\t\t\"once_cell\": \"1.5.2\",\n\t\t\"tauri-api\": {\n\t\t\t\"version\": \"0.7.5\",\n\t\t\t\"path\": \"../tauri-api\"\n\t\t},\n\t\t\"urlencoding\": \"1.1.1\"\n\t},\n\t\"target\": {\n\t\t\"cfg(target_os = \\\"windows\\\")\": {\n\t\t\t\"dependencies\": {\n\t\t\t\t\"runas\": \"0.2\"\n\t\t\t}\n\t\t}\n\t},\n\t\"build-dependencies\": {\n\t\t\"tauri_includedir_codegen\": \"0.6.2\",\n\t\t\"cfg_aliases\": \"0.1.1\"\n\t},\n\t\"dev-dependencies\": {\n\t\t\"proptest\": \"0.10.1\",\n\t\t\"serde_json\": \"1.0\",\n\t\t\"tauri\": {\n\t\t\t\"path\": \".\",\n\t\t\t\"features\": [\n\t\t\t\t\"all-api\"\n\t\t\t]\n\t\t},\n\t\t\"serde\": {\n\t\t\t\"version\": \"1.0\",\n\t\t\t\"features\": [\n\t\t\t\t\"derive\"\n\t\t\t]\n\t\t}\n\t},\n\t\"features\": {\n\t\t\"cli\": [\n\t\t\t\"tauri-api/cli\"\n\t\t],\n\t\t\"embedded-server\": [\n\t\t\t\"tiny_http\"\n\t\t],\n\t\t\"no-server\": [],\n\t\t\"all-api\": [\n\t\t\t\"tauri-api/notification\"\n\t\t],\n\t\t\"read-text-file\": [],\n\t\t\"read-binary-file\": [],\n\t\t\"write-file\": [],\n\t\t\"write-binary-file\": [],\n\t\t\"read-dir\": [],\n\t\t\"copy-file\": [],\n\t\t\"create-dir\": [],\n\t\t\"remove-dir\": [],\n\t\t\"remove-file\": [],\n\t\t\"rename-file\": [],\n\t\t\"path-api\": [],\n\t\t\"set-title\": [],\n\t\t\"execute\": [],\n\t\t\"open\": [],\n\t\t\"event\": [],\n\t\t\"updater\": [],\n\t\t\"open-dialog\": [],\n\t\t\"save-dialog\": [],\n\t\t\"http-request\": [],\n\t\t\"notification\": [\n\t\t\t\"tauri-api/notification\"\n\t\t]\n\t},\n\t\"example\": [\n\t\t{\n\t\t\t\"name\": \"communication\",\n\t\t\t\"path\": \"examples/communication/src-tauri/src/main.rs\"\n\t\t}\n\t]\n}","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar template_1 = require(\"../template\");\nvar path_1 = require(\"path\");\nvar toml_1 = __importDefault(require(\"@tauri-apps/toml\"));\nvar fs_1 = require(\"fs\");\nvar lodash_1 = require(\"lodash\");\nmodule.exports = function (args) {\n    var _a;\n    var injectResult = template_1.inject(args.directory, 'all', {\n        force: args.force,\n        logging: args.logging,\n        tauriPath: args.tauriPath\n    }, args.customConfig);\n    if (args.appName) {\n        var manifestPath = path_1.resolve(args.directory, 'src-tauri/Cargo.toml');\n        var cargoManifest = toml_1.default.parse(fs_1.readFileSync(manifestPath).toString());\n        var binName = lodash_1.kebabCase(args.appName);\n        cargoManifest.package.name = binName;\n        cargoManifest.package['default-run'] = binName;\n        if ((_a = cargoManifest.bin) === null || _a === void 0 ? void 0 : _a.length) {\n            cargoManifest.bin[0].name = binName;\n        }\n        fs_1.writeFileSync(manifestPath, toml_1.default.stringify(cargoManifest));\n    }\n    return injectResult;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// forked from https://github.com/quasarframework/quasar/blob/master/app/lib/app-extension/Extension.js\nvar fast_glob_1 = __importDefault(require(\"fast-glob\"));\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\nvar isbinaryfile_1 = require(\"isbinaryfile\");\nvar lodash_1 = require(\"lodash\");\nvar path_1 = require(\"path\");\nvar copyTemplates = function (_a) {\n    var source = _a.source, target = _a.target, scope = _a.scope;\n    var files = fast_glob_1.default.sync(['**/*'], {\n        cwd: source\n    });\n    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n        var rawPath = files_1[_i];\n        var targetRelativePath = rawPath\n            .split('/')\n            .map(function (name) {\n            // dotfiles are ignored when published to npm, therefore in templates\n            // we need to use underscore instead (e.g. \"_gitignore\")\n            if (name.startsWith('_') && name.charAt(1) !== '_') {\n                return \".\" + name.slice(1);\n            }\n            if (name.startsWith('_') && name.charAt(1) === '_') {\n                return \"\" + name.slice(1);\n            }\n            return name;\n        })\n            .join('/');\n        var targetPath = path_1.join(target, targetRelativePath);\n        var sourcePath = path_1.resolve(source, rawPath);\n        fs_extra_1.default.ensureFileSync(targetPath);\n        if (isbinaryfile_1.isBinaryFileSync(sourcePath)) {\n            fs_extra_1.default.copyFileSync(sourcePath, targetPath);\n        }\n        else {\n            // eslint-disable-next-line security/detect-non-literal-fs-filename\n            var rawContent = fs_extra_1.default.readFileSync(sourcePath, 'utf-8');\n            var compiled = lodash_1.template(rawContent, {\n                interpolate: /<%=([\\s\\S]+?)%>/g\n            });\n            // eslint-disable-next-line security/detect-non-literal-fs-filename\n            fs_extra_1.default.writeFileSync(targetPath, compiled(scope), 'utf-8');\n        }\n    }\n};\nexports.default = copyTemplates;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chalk_1 = __importDefault(require(\"chalk\"));\nvar ms_1 = __importDefault(require(\"ms\"));\nvar prevTime;\nexports.default = (function (banner, color) {\n    if (color === void 0) { color = chalk_1.default.green; }\n    return function (msg) {\n        var curr = +new Date();\n        var diff = curr - (prevTime || curr);\n        prevTime = curr;\n        if (msg) {\n            console.log(\n            // TODO: proper typings for color and banner\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-unsafe-call\n            \" \" + color(String(banner)) + \" \" + msg + \" \" + chalk_1.default.green(\"+\" + ms_1.default(diff)));\n        }\n        else {\n            console.log();\n        }\n    };\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    build: {\n        distDir: '../dist',\n        devPath: 'http://localhost:4000',\n        beforeDevCommand: '',\n        beforeBuildCommand: ''\n    },\n    ctx: {},\n    tauri: {\n        embeddedServer: {\n            active: true\n        },\n        bundle: {\n            active: true,\n            targets: 'all',\n            identifier: 'com.tauri.dev',\n            icon: [\n                'icons/32x32.png',\n                'icons/128x128.png',\n                'icons/128x128@2x.png',\n                'icons/icon.icns',\n                'icons/icon.ico'\n            ],\n            resources: [],\n            externalBin: [],\n            copyright: '',\n            category: 'DeveloperTool',\n            shortDescription: '',\n            longDescription: '',\n            deb: {\n                depends: [],\n                useBootstrapper: false\n            },\n            osx: {\n                frameworks: [],\n                minimumSystemVersion: '',\n                useBootstrapper: false\n            },\n            exceptionDomain: ''\n        },\n        allowlist: {\n            all: true\n        },\n        window: {\n            title: 'Tauri App',\n            width: 800,\n            height: 600,\n            resizable: true,\n            fullscreen: false\n        },\n        security: {\n            csp: \"default-src blob: data: filesystem: ws: http: https: 'unsafe-eval' 'unsafe-inline'\"\n        },\n        inliner: {\n            active: true\n        }\n    }\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inject = void 0;\nvar fs_extra_1 = require(\"fs-extra\");\nvar path_1 = require(\"path\");\nvar webpack_merge_1 = require(\"webpack-merge\");\nvar copy_templates_1 = __importDefault(require(\"../helpers/copy-templates\"));\nvar logger_1 = __importDefault(require(\"../helpers/logger\"));\nvar defaultConfig_1 = __importDefault(require(\"./defaultConfig\"));\nvar chalk_1 = __importDefault(require(\"chalk\"));\nvar log = logger_1.default('app:tauri');\nvar warn = logger_1.default('app:tauri (template)', chalk_1.default.red);\nvar injectConfFile = function (injectPath, _a, customConfig) {\n    var force = _a.force, logging = _a.logging;\n    if (customConfig === void 0) { customConfig = {}; }\n    var path = path_1.join(injectPath, 'tauri.conf.json');\n    if (fs_extra_1.existsSync(path) && force !== 'conf' && force !== 'all') {\n        warn(\"tauri.conf.json found in \" + path + \"\\n  Run `tauri init --force conf` to overwrite.\");\n        if (!force)\n            return false;\n    }\n    else {\n        fs_extra_1.removeSync(path);\n        Object.keys(defaultConfig_1.default).forEach(function (key) {\n            // Options marked `null` should be removed\n            /* eslint-disable security/detect-object-injection */\n            if (customConfig[key] === null) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete defaultConfig_1.default[key];\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete customConfig[key];\n            }\n            /* eslint-enable security/detect-object-injection */\n        });\n        var finalConf = webpack_merge_1.merge(defaultConfig_1.default, customConfig);\n        fs_extra_1.writeFileSync(path, JSON.stringify(finalConf, undefined, 2));\n        if (logging)\n            log('Successfully wrote tauri.conf.json');\n    }\n};\nvar injectTemplate = function (injectPath, _a) {\n    var force = _a.force, logging = _a.logging, tauriPath = _a.tauriPath;\n    var dir = path_1.normalize(path_1.join(injectPath, 'src-tauri'));\n    if (fs_extra_1.existsSync(dir) && force !== 'template' && force !== 'all') {\n        warn(\"Tauri dir (\" + dir + \") not empty.\\nRun `tauri init --force template` to overwrite.\");\n        if (!force)\n            return false;\n    }\n    var resolveTauriPath = function (tauriPath) {\n        var resolvedPath = tauriPath.startsWith('/') || /^\\S:/g.test(tauriPath)\n            ? path_1.join(tauriPath, 'tauri') // we received a full path as argument\n            : path_1.join('..', tauriPath, 'tauri'); // we received a relative path\n        return resolvedPath.replace(/\\\\/g, '/');\n    };\n    var resolveCurrentTauriVersion = function () {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access\n        var tauriManifest = require('../../../../tauri/Cargo.toml');\n        var version = tauriManifest.package.version;\n        return version.substring(0, version.lastIndexOf('.'));\n    };\n    var tauriDep = tauriPath\n        ? \"{ path = \\\"\" + resolveTauriPath(tauriPath) + \"\\\" }\"\n        : \"{ version = \\\"\" + resolveCurrentTauriVersion() + \"\\\" }\";\n    fs_extra_1.removeSync(dir);\n    copy_templates_1.default({\n        source: path_1.resolve(__dirname, '../../templates/src-tauri'),\n        scope: {\n            tauriDep: tauriDep\n        },\n        target: dir\n    });\n    if (logging)\n        log('Successfully wrote src-tauri');\n};\nvar inject = function (injectPath, type, _a, customConfig) {\n    var _b = _a.force, force = _b === void 0 ? false : _b, _c = _a.logging, logging = _c === void 0 ? false : _c, tauriPath = _a.tauriPath;\n    if (typeof type !== 'string' || typeof injectPath !== 'string') {\n        warn('- internal error. Required params missing.');\n        return false;\n    }\n    if (type === 'template' || type === 'all') {\n        injectTemplate(injectPath, { force: force, logging: logging, tauriPath: tauriPath });\n    }\n    if (type === 'conf' || type === 'all') {\n        injectConfFile(path_1.join(injectPath, 'src-tauri'), { force: force, logging: logging }, customConfig);\n    }\n    return true;\n};\nexports.inject = inject;\n","module.exports = require(\"@tauri-apps/toml\");;","module.exports = require(\"chalk\");;","module.exports = require(\"fast-glob\");;","module.exports = require(\"fs\");;","module.exports = require(\"fs-extra\");;","module.exports = require(\"isbinaryfile\");;","module.exports = require(\"lodash\");;","module.exports = require(\"ms\");;","module.exports = require(\"path\");;","module.exports = require(\"webpack-merge\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/api/init.ts\");\n"],"sourceRoot":""}